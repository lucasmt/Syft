#assume always(cancel -> next_e[1:3](go));
#assert always(req -> next_e[1:3] (grant || cancel));
#assert always(grant -> next(!grant));
#assert always(cancel -> next((!grant) until! go));


(G(cancel=1 -> (X(go=1) + X(X(go=1)) + X(X(X(go=1))) )))   -> (  G(req=1 -> (X(    grant=1 + cancel=1) + X(X(  grant=1 + cancel=1)) + X(X(X(grant=1 + cancel=1))) )) * G( grant=1  -> X(grant=0)) *  G( cancel=1 -> X(grant=0 U go=1)));         
